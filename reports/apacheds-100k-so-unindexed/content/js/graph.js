/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 22.0, "minX": 0.0, "maxY": 3.590248E7, "series": [{"data": [[0.0, 22.0], [0.1, 40.0], [0.2, 74.0], [0.3, 93.0], [0.4, 101.0], [0.5, 131.0], [0.6, 221.0], [0.7, 242.0], [0.8, 252.0], [0.9, 262.0], [1.0, 268.0], [1.1, 286.0], [1.2, 291.0], [1.3, 300.0], [1.4, 309.0], [1.5, 319.0], [1.6, 333.0], [1.7, 443.0], [1.8, 490.0], [1.9, 3.5892056E7], [2.0, 3.5892208E7], [2.1, 3.5892258E7], [2.2, 3.5892413E7], [2.3, 3.5892498E7], [2.4, 3.5892577E7], [2.5, 3.5892599E7], [2.6, 3.5892641E7], [2.7, 3.5892678E7], [2.8, 3.5892723E7], [2.9, 3.5892804E7], [3.0, 3.5892842E7], [3.1, 3.5892856E7], [3.2, 3.5892883E7], [3.3, 3.5892904E7], [3.4, 3.5892932E7], [3.5, 3.5892943E7], [3.6, 3.5892958E7], [3.7, 3.5892982E7], [3.8, 3.5893005E7], [3.9, 3.5893013E7], [4.0, 3.5893043E7], [4.1, 3.589307E7], [4.2, 3.5893092E7], [4.3, 3.5893116E7], [4.4, 3.5893129E7], [4.5, 3.5893149E7], [4.6, 3.5893169E7], [4.7, 3.5893193E7], [4.8, 3.5893215E7], [4.9, 3.5893224E7], [5.0, 3.5893235E7], [5.1, 3.5893251E7], [5.2, 3.5893258E7], [5.3, 3.5893268E7], [5.4, 3.5893302E7], [5.5, 3.5893321E7], [5.6, 3.5893335E7], [5.7, 3.5893347E7], [5.8, 3.5893358E7], [5.9, 3.5893367E7], [6.0, 3.5893379E7], [6.1, 3.5893399E7], [6.2, 3.589341E7], [6.3, 3.5893421E7], [6.4, 3.5893433E7], [6.5, 3.5893453E7], [6.6, 3.5893469E7], [6.7, 3.5893491E7], [6.8, 3.5893509E7], [6.9, 3.5893526E7], [7.0, 3.5893549E7], [7.1, 3.5893554E7], [7.2, 3.5893573E7], [7.3, 3.5893583E7], [7.4, 3.5893597E7], [7.5, 3.5893609E7], [7.6, 3.5893629E7], [7.7, 3.5893669E7], [7.8, 3.5893683E7], [7.9, 3.5893695E7], [8.0, 3.5893708E7], [8.1, 3.5893713E7], [8.2, 3.5893738E7], [8.3, 3.5893762E7], [8.4, 3.5893783E7], [8.5, 3.5893787E7], [8.6, 3.5893796E7], [8.7, 3.5893804E7], [8.8, 3.5893838E7], [8.9, 3.5893844E7], [9.0, 3.5893866E7], [9.1, 3.5893874E7], [9.2, 3.5893888E7], [9.3, 3.5893893E7], [9.4, 3.5893904E7], [9.5, 3.5893913E7], [9.6, 3.5893932E7], [9.7, 3.5893952E7], [9.8, 3.5893957E7], [9.9, 3.5893967E7], [10.0, 3.5893978E7], [10.1, 3.5893992E7], [10.2, 3.5893998E7], [10.3, 3.5894001E7], [10.4, 3.5894015E7], [10.5, 3.5894031E7], [10.6, 3.589405E7], [10.7, 3.589407E7], [10.8, 3.5894091E7], [10.9, 3.5894112E7], [11.0, 3.5894124E7], [11.1, 3.5894148E7], [11.2, 3.5894153E7], [11.3, 3.5894159E7], [11.4, 3.5894175E7], [11.5, 3.5894182E7], [11.6, 3.5894213E7], [11.7, 3.5894221E7], [11.8, 3.5894234E7], [11.9, 3.5894239E7], [12.0, 3.5894249E7], [12.1, 3.5894254E7], [12.2, 3.5894265E7], [12.3, 3.5894274E7], [12.4, 3.5894294E7], [12.5, 3.5894305E7], [12.6, 3.5894317E7], [12.7, 3.589433E7], [12.8, 3.5894334E7], [12.9, 3.5894349E7], [13.0, 3.5894369E7], [13.1, 3.5894379E7], [13.2, 3.5894388E7], [13.3, 3.5894393E7], [13.4, 3.5894403E7], [13.5, 3.5894409E7], [13.6, 3.5894412E7], [13.7, 3.5894432E7], [13.8, 3.5894437E7], [13.9, 3.5894447E7], [14.0, 3.5894451E7], [14.1, 3.5894457E7], [14.2, 3.5894467E7], [14.3, 3.5894476E7], [14.4, 3.5894486E7], [14.5, 3.5894495E7], [14.6, 3.5894504E7], [14.7, 3.5894512E7], [14.8, 3.5894518E7], [14.9, 3.5894527E7], [15.0, 3.5894539E7], [15.1, 3.5894543E7], [15.2, 3.5894547E7], [15.3, 3.5894558E7], [15.4, 3.5894576E7], [15.5, 3.5894588E7], [15.6, 3.5894602E7], [15.7, 3.5894614E7], [15.8, 3.5894626E7], [15.9, 3.5894642E7], [16.0, 3.589466E7], [16.1, 3.5894666E7], [16.2, 3.5894674E7], [16.3, 3.5894687E7], [16.4, 3.5894694E7], [16.5, 3.5894697E7], [16.6, 3.5894724E7], [16.7, 3.5894741E7], [16.8, 3.589475E7], [16.9, 3.5894762E7], [17.0, 3.5894781E7], [17.1, 3.5894792E7], [17.2, 3.5894802E7], [17.3, 3.5894809E7], [17.4, 3.5894813E7], [17.5, 3.5894827E7], [17.6, 3.5894834E7], [17.7, 3.589485E7], [17.8, 3.5894858E7], [17.9, 3.5894862E7], [18.0, 3.5894879E7], [18.1, 3.5894895E7], [18.2, 3.5894906E7], [18.3, 3.5894915E7], [18.4, 3.5894921E7], [18.5, 3.5894935E7], [18.6, 3.5894941E7], [18.7, 3.5894953E7], [18.8, 3.5894956E7], [18.9, 3.5894966E7], [19.0, 3.5894971E7], [19.1, 3.5894978E7], [19.2, 3.5894991E7], [19.3, 3.5895002E7], [19.4, 3.589501E7], [19.5, 3.5895019E7], [19.6, 3.5895032E7], [19.7, 3.5895049E7], [19.8, 3.5895057E7], [19.9, 3.5895067E7], [20.0, 3.5895078E7], [20.1, 3.5895085E7], [20.2, 3.5895095E7], [20.3, 3.58951E7], [20.4, 3.5895108E7], [20.5, 3.5895117E7], [20.6, 3.5895127E7], [20.7, 3.5895139E7], [20.8, 3.5895149E7], [20.9, 3.5895168E7], [21.0, 3.589517E7], [21.1, 3.5895179E7], [21.2, 3.5895189E7], [21.3, 3.5895199E7], [21.4, 3.5895209E7], [21.5, 3.589522E7], [21.6, 3.5895229E7], [21.7, 3.5895236E7], [21.8, 3.5895248E7], [21.9, 3.5895257E7], [22.0, 3.5895271E7], [22.1, 3.5895274E7], [22.2, 3.5895284E7], [22.3, 3.5895292E7], [22.4, 3.5895304E7], [22.5, 3.589531E7], [22.6, 3.5895315E7], [22.7, 3.5895327E7], [22.8, 3.5895337E7], [22.9, 3.5895348E7], [23.0, 3.5895359E7], [23.1, 3.5895366E7], [23.2, 3.589538E7], [23.3, 3.5895391E7], [23.4, 3.5895398E7], [23.5, 3.5895413E7], [23.6, 3.5895418E7], [23.7, 3.5895433E7], [23.8, 3.5895439E7], [23.9, 3.5895455E7], [24.0, 3.5895463E7], [24.1, 3.5895475E7], [24.2, 3.5895485E7], [24.3, 3.5895498E7], [24.4, 3.5895505E7], [24.5, 3.5895514E7], [24.6, 3.5895526E7], [24.7, 3.5895539E7], [24.8, 3.5895552E7], [24.9, 3.5895563E7], [25.0, 3.5895583E7], [25.1, 3.5895604E7], [25.2, 3.5895621E7], [25.3, 3.5895633E7], [25.4, 3.5895638E7], [25.5, 3.5895648E7], [25.6, 3.5895656E7], [25.7, 3.5895663E7], [25.8, 3.589567E7], [25.9, 3.5895682E7], [26.0, 3.5895686E7], [26.1, 3.5895692E7], [26.2, 3.5895705E7], [26.3, 3.5895716E7], [26.4, 3.5895727E7], [26.5, 3.5895731E7], [26.6, 3.5895738E7], [26.7, 3.5895744E7], [26.8, 3.5895752E7], [26.9, 3.5895758E7], [27.0, 3.5895768E7], [27.1, 3.5895773E7], [27.2, 3.5895788E7], [27.3, 3.5895803E7], [27.4, 3.5895812E7], [27.5, 3.5895816E7], [27.6, 3.5895821E7], [27.7, 3.5895827E7], [27.8, 3.5895839E7], [27.9, 3.5895851E7], [28.0, 3.5895857E7], [28.1, 3.5895871E7], [28.2, 3.5895882E7], [28.3, 3.5895884E7], [28.4, 3.5895899E7], [28.5, 3.5895915E7], [28.6, 3.5895919E7], [28.7, 3.5895928E7], [28.8, 3.5895936E7], [28.9, 3.5895942E7], [29.0, 3.5895949E7], [29.1, 3.5895961E7], [29.2, 3.5895972E7], [29.3, 3.5895979E7], [29.4, 3.5895989E7], [29.5, 3.5895998E7], [29.6, 3.5896008E7], [29.7, 3.5896017E7], [29.8, 3.5896028E7], [29.9, 3.5896038E7], [30.0, 3.5896043E7], [30.1, 3.589606E7], [30.2, 3.5896064E7], [30.3, 3.5896073E7], [30.4, 3.5896083E7], [30.5, 3.5896088E7], [30.6, 3.5896093E7], [30.7, 3.5896101E7], [30.8, 3.589611E7], [30.9, 3.5896117E7], [31.0, 3.5896135E7], [31.1, 3.5896143E7], [31.2, 3.5896154E7], [31.3, 3.5896166E7], [31.4, 3.5896179E7], [31.5, 3.5896187E7], [31.6, 3.5896197E7], [31.7, 3.589621E7], [31.8, 3.5896219E7], [31.9, 3.5896228E7], [32.0, 3.5896247E7], [32.1, 3.5896261E7], [32.2, 3.5896268E7], [32.3, 3.5896282E7], [32.4, 3.5896288E7], [32.5, 3.5896306E7], [32.6, 3.5896318E7], [32.7, 3.5896338E7], [32.8, 3.5896346E7], [32.9, 3.5896349E7], [33.0, 3.5896359E7], [33.1, 3.5896373E7], [33.2, 3.5896379E7], [33.3, 3.5896393E7], [33.4, 3.589642E7], [33.5, 3.5896424E7], [33.6, 3.5896431E7], [33.7, 3.5896449E7], [33.8, 3.589646E7], [33.9, 3.5896469E7], [34.0, 3.5896472E7], [34.1, 3.5896482E7], [34.2, 3.5896489E7], [34.3, 3.5896501E7], [34.4, 3.5896513E7], [34.5, 3.5896528E7], [34.6, 3.5896546E7], [34.7, 3.5896561E7], [34.8, 3.5896572E7], [34.9, 3.589658E7], [35.0, 3.5896591E7], [35.1, 3.58966E7], [35.2, 3.5896612E7], [35.3, 3.5896625E7], [35.4, 3.5896638E7], [35.5, 3.5896646E7], [35.6, 3.5896656E7], [35.7, 3.5896664E7], [35.8, 3.589667E7], [35.9, 3.5896678E7], [36.0, 3.5896685E7], [36.1, 3.5896694E7], [36.2, 3.5896705E7], [36.3, 3.5896715E7], [36.4, 3.5896723E7], [36.5, 3.5896735E7], [36.6, 3.5896746E7], [36.7, 3.5896758E7], [36.8, 3.589677E7], [36.9, 3.5896776E7], [37.0, 3.5896788E7], [37.1, 3.5896794E7], [37.2, 3.5896808E7], [37.3, 3.5896818E7], [37.4, 3.5896831E7], [37.5, 3.5896836E7], [37.6, 3.5896847E7], [37.7, 3.589686E7], [37.8, 3.5896877E7], [37.9, 3.589689E7], [38.0, 3.5896899E7], [38.1, 3.5896911E7], [38.2, 3.5896923E7], [38.3, 3.5896934E7], [38.4, 3.5896941E7], [38.5, 3.589695E7], [38.6, 3.5896969E7], [38.7, 3.5896974E7], [38.8, 3.5896982E7], [38.9, 3.589699E7], [39.0, 3.5896996E7], [39.1, 3.5897011E7], [39.2, 3.5897022E7], [39.3, 3.5897032E7], [39.4, 3.5897043E7], [39.5, 3.5897053E7], [39.6, 3.5897062E7], [39.7, 3.5897066E7], [39.8, 3.5897077E7], [39.9, 3.5897088E7], [40.0, 3.5897096E7], [40.1, 3.5897101E7], [40.2, 3.5897109E7], [40.3, 3.5897114E7], [40.4, 3.5897122E7], [40.5, 3.5897131E7], [40.6, 3.5897142E7], [40.7, 3.589715E7], [40.8, 3.5897159E7], [40.9, 3.5897167E7], [41.0, 3.5897177E7], [41.1, 3.5897193E7], [41.2, 3.5897204E7], [41.3, 3.589722E7], [41.4, 3.5897238E7], [41.5, 3.5897249E7], [41.6, 3.5897262E7], [41.7, 3.5897269E7], [41.8, 3.5897272E7], [41.9, 3.5897282E7], [42.0, 3.589729E7], [42.1, 3.5897298E7], [42.2, 3.5897309E7], [42.3, 3.5897318E7], [42.4, 3.5897323E7], [42.5, 3.5897327E7], [42.6, 3.5897334E7], [42.7, 3.5897337E7], [42.8, 3.5897345E7], [42.9, 3.5897348E7], [43.0, 3.5897354E7], [43.1, 3.5897363E7], [43.2, 3.5897371E7], [43.3, 3.5897381E7], [43.4, 3.5897384E7], [43.5, 3.5897388E7], [43.6, 3.5897392E7], [43.7, 3.5897407E7], [43.8, 3.5897413E7], [43.9, 3.5897423E7], [44.0, 3.5897434E7], [44.1, 3.5897443E7], [44.2, 3.5897448E7], [44.3, 3.5897457E7], [44.4, 3.589746E7], [44.5, 3.5897467E7], [44.6, 3.5897474E7], [44.7, 3.5897494E7], [44.8, 3.5897503E7], [44.9, 3.5897511E7], [45.0, 3.589752E7], [45.1, 3.5897526E7], [45.2, 3.5897537E7], [45.3, 3.5897549E7], [45.4, 3.5897553E7], [45.5, 3.589756E7], [45.6, 3.5897571E7], [45.7, 3.5897582E7], [45.8, 3.5897588E7], [45.9, 3.5897596E7], [46.0, 3.5897604E7], [46.1, 3.5897611E7], [46.2, 3.5897617E7], [46.3, 3.589762E7], [46.4, 3.5897633E7], [46.5, 3.5897636E7], [46.6, 3.5897639E7], [46.7, 3.5897654E7], [46.8, 3.5897661E7], [46.9, 3.5897672E7], [47.0, 3.5897688E7], [47.1, 3.5897702E7], [47.2, 3.5897707E7], [47.3, 3.5897717E7], [47.4, 3.589773E7], [47.5, 3.5897742E7], [47.6, 3.5897751E7], [47.7, 3.589776E7], [47.8, 3.5897767E7], [47.9, 3.5897775E7], [48.0, 3.5897784E7], [48.1, 3.5897789E7], [48.2, 3.5897794E7], [48.3, 3.5897803E7], [48.4, 3.5897818E7], [48.5, 3.5897827E7], [48.6, 3.5897834E7], [48.7, 3.5897858E7], [48.8, 3.5897865E7], [48.9, 3.5897873E7], [49.0, 3.5897885E7], [49.1, 3.5897898E7], [49.2, 3.5897906E7], [49.3, 3.589791E7], [49.4, 3.5897919E7], [49.5, 3.5897938E7], [49.6, 3.5897944E7], [49.7, 3.5897956E7], [49.8, 3.589796E7], [49.9, 3.5897971E7], [50.0, 3.5897981E7], [50.1, 3.5897991E7], [50.2, 3.5897994E7], [50.3, 3.5898004E7], [50.4, 3.5898012E7], [50.5, 3.5898037E7], [50.6, 3.5898047E7], [50.7, 3.5898073E7], [50.8, 3.5898083E7], [50.9, 3.5898101E7], [51.0, 3.589812E7], [51.1, 3.5898127E7], [51.2, 3.5898144E7], [51.3, 3.5898164E7], [51.4, 3.5898177E7], [51.5, 3.5898197E7], [51.6, 3.5898203E7], [51.7, 3.5898213E7], [51.8, 3.5898226E7], [51.9, 3.5898236E7], [52.0, 3.5898241E7], [52.1, 3.5898248E7], [52.2, 3.5898268E7], [52.3, 3.5898282E7], [52.4, 3.5898289E7], [52.5, 3.5898297E7], [52.6, 3.5898307E7], [52.7, 3.589832E7], [52.8, 3.5898334E7], [52.9, 3.589834E7], [53.0, 3.5898359E7], [53.1, 3.5898377E7], [53.2, 3.5898384E7], [53.3, 3.5898394E7], [53.4, 3.5898405E7], [53.5, 3.5898416E7], [53.6, 3.5898422E7], [53.7, 3.5898431E7], [53.8, 3.5898436E7], [53.9, 3.5898453E7], [54.0, 3.5898469E7], [54.1, 3.5898496E7], [54.2, 3.5898514E7], [54.3, 3.5898521E7], [54.4, 3.589854E7], [54.5, 3.5898552E7], [54.6, 3.5898563E7], [54.7, 3.5898568E7], [54.8, 3.5898581E7], [54.9, 3.5898586E7], [55.0, 3.5898597E7], [55.1, 3.5898603E7], [55.2, 3.5898612E7], [55.3, 3.5898622E7], [55.4, 3.5898636E7], [55.5, 3.5898651E7], [55.6, 3.5898657E7], [55.7, 3.5898658E7], [55.8, 3.5898666E7], [55.9, 3.5898671E7], [56.0, 3.5898676E7], [56.1, 3.5898686E7], [56.2, 3.5898699E7], [56.3, 3.5898705E7], [56.4, 3.5898715E7], [56.5, 3.589873E7], [56.6, 3.5898741E7], [56.7, 3.5898756E7], [56.8, 3.5898762E7], [56.9, 3.5898765E7], [57.0, 3.5898775E7], [57.1, 3.5898784E7], [57.2, 3.5898794E7], [57.3, 3.5898806E7], [57.4, 3.5898815E7], [57.5, 3.5898823E7], [57.6, 3.5898833E7], [57.7, 3.589884E7], [57.8, 3.5898846E7], [57.9, 3.5898851E7], [58.0, 3.5898852E7], [58.1, 3.5898861E7], [58.2, 3.5898869E7], [58.3, 3.5898879E7], [58.4, 3.5898885E7], [58.5, 3.5898893E7], [58.6, 3.5898898E7], [58.7, 3.5898902E7], [58.8, 3.5898906E7], [58.9, 3.5898917E7], [59.0, 3.5898924E7], [59.1, 3.5898932E7], [59.2, 3.5898943E7], [59.3, 3.5898951E7], [59.4, 3.5898957E7], [59.5, 3.5898962E7], [59.6, 3.5898971E7], [59.7, 3.5898979E7], [59.8, 3.5898987E7], [59.9, 3.5898996E7], [60.0, 3.5899E7], [60.1, 3.5899005E7], [60.2, 3.589901E7], [60.3, 3.5899021E7], [60.4, 3.5899026E7], [60.5, 3.5899035E7], [60.6, 3.5899044E7], [60.7, 3.5899054E7], [60.8, 3.5899059E7], [60.9, 3.5899064E7], [61.0, 3.5899074E7], [61.1, 3.5899085E7], [61.2, 3.5899092E7], [61.3, 3.58991E7], [61.4, 3.5899104E7], [61.5, 3.5899114E7], [61.6, 3.5899124E7], [61.7, 3.5899137E7], [61.8, 3.5899146E7], [61.9, 3.5899156E7], [62.0, 3.5899169E7], [62.1, 3.5899178E7], [62.2, 3.5899183E7], [62.3, 3.5899192E7], [62.4, 3.5899194E7], [62.5, 3.5899198E7], [62.6, 3.5899202E7], [62.7, 3.5899215E7], [62.8, 3.5899222E7], [62.9, 3.5899226E7], [63.0, 3.589924E7], [63.1, 3.5899252E7], [63.2, 3.5899261E7], [63.3, 3.5899266E7], [63.4, 3.5899272E7], [63.5, 3.5899276E7], [63.6, 3.5899283E7], [63.7, 3.5899294E7], [63.8, 3.5899302E7], [63.9, 3.5899303E7], [64.0, 3.5899315E7], [64.1, 3.5899322E7], [64.2, 3.5899333E7], [64.3, 3.5899341E7], [64.4, 3.5899352E7], [64.5, 3.5899355E7], [64.6, 3.5899364E7], [64.7, 3.5899368E7], [64.8, 3.5899373E7], [64.9, 3.5899375E7], [65.0, 3.5899383E7], [65.1, 3.5899386E7], [65.2, 3.5899392E7], [65.3, 3.5899395E7], [65.4, 3.5899402E7], [65.5, 3.5899411E7], [65.6, 3.5899413E7], [65.7, 3.5899427E7], [65.8, 3.5899435E7], [65.9, 3.5899449E7], [66.0, 3.5899456E7], [66.1, 3.5899462E7], [66.2, 3.5899466E7], [66.3, 3.589947E7], [66.4, 3.5899475E7], [66.5, 3.5899481E7], [66.6, 3.5899503E7], [66.7, 3.5899508E7], [66.8, 3.5899519E7], [66.9, 3.5899525E7], [67.0, 3.5899541E7], [67.1, 3.5899544E7], [67.2, 3.5899551E7], [67.3, 3.5899559E7], [67.4, 3.5899569E7], [67.5, 3.5899577E7], [67.6, 3.5899583E7], [67.7, 3.5899593E7], [67.8, 3.5899608E7], [67.9, 3.5899616E7], [68.0, 3.5899622E7], [68.1, 3.5899627E7], [68.2, 3.5899637E7], [68.3, 3.5899643E7], [68.4, 3.5899657E7], [68.5, 3.5899668E7], [68.6, 3.5899671E7], [68.7, 3.589968E7], [68.8, 3.5899692E7], [68.9, 3.5899697E7], [69.0, 3.58997E7], [69.1, 3.5899705E7], [69.2, 3.5899732E7], [69.3, 3.5899739E7], [69.4, 3.5899741E7], [69.5, 3.589975E7], [69.6, 3.5899755E7], [69.7, 3.5899766E7], [69.8, 3.5899769E7], [69.9, 3.5899779E7], [70.0, 3.5899787E7], [70.1, 3.5899795E7], [70.2, 3.5899801E7], [70.3, 3.5899802E7], [70.4, 3.5899806E7], [70.5, 3.5899812E7], [70.6, 3.5899817E7], [70.7, 3.5899823E7], [70.8, 3.5899835E7], [70.9, 3.5899842E7], [71.0, 3.5899855E7], [71.1, 3.5899862E7], [71.2, 3.5899867E7], [71.3, 3.5899874E7], [71.4, 3.5899879E7], [71.5, 3.5899889E7], [71.6, 3.5899894E7], [71.7, 3.5899902E7], [71.8, 3.5899914E7], [71.9, 3.589992E7], [72.0, 3.5899927E7], [72.1, 3.5899937E7], [72.2, 3.5899949E7], [72.3, 3.5899957E7], [72.4, 3.5899972E7], [72.5, 3.5899979E7], [72.6, 3.5899994E7], [72.7, 3.5900006E7], [72.8, 3.5900011E7], [72.9, 3.5900018E7], [73.0, 3.5900024E7], [73.1, 3.590004E7], [73.2, 3.5900045E7], [73.3, 3.5900057E7], [73.4, 3.5900067E7], [73.5, 3.590007E7], [73.6, 3.5900081E7], [73.7, 3.5900088E7], [73.8, 3.5900095E7], [73.9, 3.5900106E7], [74.0, 3.5900119E7], [74.1, 3.5900126E7], [74.2, 3.590013E7], [74.3, 3.5900139E7], [74.4, 3.5900148E7], [74.5, 3.5900161E7], [74.6, 3.5900165E7], [74.7, 3.5900171E7], [74.8, 3.5900174E7], [74.9, 3.5900177E7], [75.0, 3.5900179E7], [75.1, 3.5900181E7], [75.2, 3.5900183E7], [75.3, 3.5900184E7], [75.4, 3.5900185E7], [75.5, 3.5900188E7], [75.6, 3.5900189E7], [75.7, 3.590019E7], [75.8, 3.5900193E7], [75.9, 3.5900195E7], [76.0, 3.5900199E7], [76.1, 3.5900203E7], [76.2, 3.5900205E7], [76.3, 3.5900208E7], [76.4, 3.5900213E7], [76.5, 3.5900214E7], [76.6, 3.5900216E7], [76.7, 3.5900222E7], [76.8, 3.5900224E7], [76.9, 3.5900227E7], [77.0, 3.5900229E7], [77.1, 3.5900233E7], [77.2, 3.5900239E7], [77.3, 3.5900245E7], [77.4, 3.5900253E7], [77.5, 3.5900259E7], [77.6, 3.590027E7], [77.7, 3.5900278E7], [77.8, 3.5900296E7], [77.9, 3.5900312E7], [78.0, 3.590032E7], [78.1, 3.5900335E7], [78.2, 3.5900342E7], [78.3, 3.5900346E7], [78.4, 3.5900353E7], [78.5, 3.5900355E7], [78.6, 3.5900365E7], [78.7, 3.5900369E7], [78.8, 3.5900374E7], [78.9, 3.590038E7], [79.0, 3.5900384E7], [79.1, 3.5900385E7], [79.2, 3.5900388E7], [79.3, 3.5900389E7], [79.4, 3.5900393E7], [79.5, 3.5900397E7], [79.6, 3.5900401E7], [79.7, 3.5900404E7], [79.8, 3.5900405E7], [79.9, 3.5900406E7], [80.0, 3.5900409E7], [80.1, 3.5900411E7], [80.2, 3.5900413E7], [80.3, 3.5900415E7], [80.4, 3.5900418E7], [80.5, 3.5900421E7], [80.6, 3.5900423E7], [80.7, 3.5900426E7], [80.8, 3.5900429E7], [80.9, 3.590043E7], [81.0, 3.5900432E7], [81.1, 3.5900435E7], [81.2, 3.5900438E7], [81.3, 3.5900438E7], [81.4, 3.590044E7], [81.5, 3.5900444E7], [81.6, 3.5900448E7], [81.7, 3.5900451E7], [81.8, 3.5900452E7], [81.9, 3.5900453E7], [82.0, 3.5900459E7], [82.1, 3.5900465E7], [82.2, 3.5900468E7], [82.3, 3.590047E7], [82.4, 3.5900477E7], [82.5, 3.5900486E7], [82.6, 3.5900491E7], [82.7, 3.5900494E7], [82.8, 3.5900497E7], [82.9, 3.5900505E7], [83.0, 3.5900519E7], [83.1, 3.590053E7], [83.2, 3.5900534E7], [83.3, 3.5900547E7], [83.4, 3.5900552E7], [83.5, 3.5900559E7], [83.6, 3.5900566E7], [83.7, 3.5900576E7], [83.8, 3.5900583E7], [83.9, 3.5900584E7], [84.0, 3.5900587E7], [84.1, 3.5900592E7], [84.2, 3.5900596E7], [84.3, 3.5900598E7], [84.4, 3.59006E7], [84.5, 3.5900603E7], [84.6, 3.5900608E7], [84.7, 3.5900614E7], [84.8, 3.5900616E7], [84.9, 3.5900617E7], [85.0, 3.5900618E7], [85.1, 3.5900621E7], [85.2, 3.5900624E7], [85.3, 3.5900626E7], [85.4, 3.5900627E7], [85.5, 3.590063E7], [85.6, 3.5900632E7], [85.7, 3.5900637E7], [85.8, 3.5900641E7], [85.9, 3.5900643E7], [86.0, 3.5900645E7], [86.1, 3.5900649E7], [86.2, 3.5900656E7], [86.3, 3.590066E7], [86.4, 3.5900664E7], [86.5, 3.5900667E7], [86.6, 3.5900668E7], [86.7, 3.5900671E7], [86.8, 3.590068E7], [86.9, 3.5900698E7], [87.0, 3.5900703E7], [87.1, 3.5900706E7], [87.2, 3.5900708E7], [87.3, 3.5900715E7], [87.4, 3.5900727E7], [87.5, 3.5900735E7], [87.6, 3.5900741E7], [87.7, 3.5900747E7], [87.8, 3.5900754E7], [87.9, 3.5900758E7], [88.0, 3.5900761E7], [88.1, 3.5900765E7], [88.2, 3.590077E7], [88.3, 3.5900775E7], [88.4, 3.5900784E7], [88.5, 3.5900793E7], [88.6, 3.5900807E7], [88.7, 3.5900815E7], [88.8, 3.5900832E7], [88.9, 3.5900842E7], [89.0, 3.5900858E7], [89.1, 3.5900869E7], [89.2, 3.5900873E7], [89.3, 3.5900909E7], [89.4, 3.5900929E7], [89.5, 3.5900942E7], [89.6, 3.5900952E7], [89.7, 3.5900978E7], [89.8, 3.5900994E7], [89.9, 3.5901011E7], [90.0, 3.5901029E7], [90.1, 3.5901056E7], [90.2, 3.5901063E7], [90.3, 3.5901072E7], [90.4, 3.5901085E7], [90.5, 3.5901096E7], [90.6, 3.590112E7], [90.7, 3.5901123E7], [90.8, 3.5901152E7], [90.9, 3.5901157E7], [91.0, 3.5901166E7], [91.1, 3.5901176E7], [91.2, 3.5901194E7], [91.3, 3.5901209E7], [91.4, 3.5901221E7], [91.5, 3.5901226E7], [91.6, 3.5901237E7], [91.7, 3.5901243E7], [91.8, 3.5901255E7], [91.9, 3.5901261E7], [92.0, 3.5901269E7], [92.1, 3.5901297E7], [92.2, 3.5901306E7], [92.3, 3.5901317E7], [92.4, 3.5901342E7], [92.5, 3.5901354E7], [92.6, 3.5901369E7], [92.7, 3.5901383E7], [92.8, 3.5901392E7], [92.9, 3.5901404E7], [93.0, 3.5901417E7], [93.1, 3.5901432E7], [93.2, 3.5901444E7], [93.3, 3.5901466E7], [93.4, 3.5901473E7], [93.5, 3.5901484E7], [93.6, 3.5901495E7], [93.7, 3.5901522E7], [93.8, 3.5901537E7], [93.9, 3.5901547E7], [94.0, 3.5901549E7], [94.1, 3.590155E7], [94.2, 3.5901552E7], [94.3, 3.5901555E7], [94.4, 3.5901559E7], [94.5, 3.5901565E7], [94.6, 3.5901575E7], [94.7, 3.5901582E7], [94.8, 3.5901591E7], [94.9, 3.5901592E7], [95.0, 3.5901614E7], [95.1, 3.5901643E7], [95.2, 3.5901654E7], [95.3, 3.5901663E7], [95.4, 3.5901676E7], [95.5, 3.5901696E7], [95.6, 3.5901714E7], [95.7, 3.5901724E7], [95.8, 3.5901746E7], [95.9, 3.5901756E7], [96.0, 3.5901772E7], [96.1, 3.5901777E7], [96.2, 3.5901795E7], [96.3, 3.5901808E7], [96.4, 3.5901816E7], [96.5, 3.5901829E7], [96.6, 3.5901842E7], [96.7, 3.5901858E7], [96.8, 3.5901879E7], [96.9, 3.5901906E7], [97.0, 3.5901935E7], [97.1, 3.5901957E7], [97.2, 3.5901975E7], [97.3, 3.5901999E7], [97.4, 3.5902005E7], [97.5, 3.5902013E7], [97.6, 3.5902041E7], [97.7, 3.5902065E7], [97.8, 3.5902068E7], [97.9, 3.590207E7], [98.0, 3.5902073E7], [98.1, 3.5902078E7], [98.2, 3.5902089E7], [98.3, 3.5902106E7], [98.4, 3.5902109E7], [98.5, 3.5902116E7], [98.6, 3.5902119E7], [98.7, 3.5902122E7], [98.8, 3.5902127E7], [98.9, 3.5902133E7], [99.0, 3.5902138E7], [99.1, 3.5902141E7], [99.2, 3.5902159E7], [99.3, 3.5902177E7], [99.4, 3.590219E7], [99.5, 3.5902221E7], [99.6, 3.5902246E7], [99.7, 3.5902252E7], [99.8, 3.5902262E7], [99.9, 3.5902347E7], [100.0, 3.590248E7]], "isOverall": false, "label": "Bind", "isController": false}, {"data": [[0.0, 1257678.0], [0.1, 1257678.0], [0.2, 1257678.0], [0.3, 1257678.0], [0.4, 1257678.0], [0.5, 1257678.0], [0.6, 1257678.0], [0.7, 1257678.0], [0.8, 1257678.0], [0.9, 1257678.0], [1.0, 1257678.0], [1.1, 1257678.0], [1.2, 1257678.0], [1.3, 1257678.0], [1.4, 1257683.0], [1.5, 1257683.0], [1.6, 1257683.0], [1.7, 1257683.0], [1.8, 1257683.0], [1.9, 1257683.0], [2.0, 1257683.0], [2.1, 1257683.0], [2.2, 1257683.0], [2.3, 1257683.0], [2.4, 1257683.0], [2.5, 1257683.0], [2.6, 1257683.0], [2.7, 1257683.0], [2.8, 1257935.0], [2.9, 1257935.0], [3.0, 1257935.0], [3.1, 1257935.0], [3.2, 1257935.0], [3.3, 1257935.0], [3.4, 1257935.0], [3.5, 1257935.0], [3.6, 1257935.0], [3.7, 1257935.0], [3.8, 1257935.0], [3.9, 1257935.0], [4.0, 1257935.0], [4.1, 1257953.0], [4.2, 1257953.0], [4.3, 1257953.0], [4.4, 1257953.0], [4.5, 1257953.0], [4.6, 1257953.0], [4.7, 1257953.0], [4.8, 1257953.0], [4.9, 1257953.0], [5.0, 1257953.0], [5.1, 1257953.0], [5.2, 1257953.0], [5.3, 1257953.0], [5.4, 1257953.0], [5.5, 1258001.0], [5.6, 1258001.0], [5.7, 1258001.0], [5.8, 1258001.0], [5.9, 1258001.0], [6.0, 1258001.0], [6.1, 1258001.0], [6.2, 1258001.0], [6.3, 1258001.0], [6.4, 1258001.0], [6.5, 1258001.0], [6.6, 1258001.0], [6.7, 1258001.0], [6.8, 1258343.0], [6.9, 1258343.0], [7.0, 1258343.0], [7.1, 1258343.0], [7.2, 1258343.0], [7.3, 1258343.0], [7.4, 1258343.0], [7.5, 1258343.0], [7.6, 1258343.0], [7.7, 1258343.0], [7.8, 1258343.0], [7.9, 1258343.0], [8.0, 1258343.0], [8.1, 1258343.0], [8.2, 1258379.0], [8.3, 1258379.0], [8.4, 1258379.0], [8.5, 1258379.0], [8.6, 1258379.0], [8.7, 1258379.0], [8.8, 1258379.0], [8.9, 1258379.0], [9.0, 1258379.0], [9.1, 1258379.0], [9.2, 1258379.0], [9.3, 1258379.0], [9.4, 1258379.0], [9.5, 1258428.0], [9.6, 1258428.0], [9.7, 1258428.0], [9.8, 1258428.0], [9.9, 1258428.0], [10.0, 1258428.0], [10.1, 1258428.0], [10.2, 1258428.0], [10.3, 1258428.0], [10.4, 1258428.0], [10.5, 1258428.0], [10.6, 1258428.0], [10.7, 1258428.0], [10.8, 1258428.0], [10.9, 1440134.0], [11.0, 1440134.0], [11.1, 1440134.0], [11.2, 1440134.0], [11.3, 1440134.0], [11.4, 1440134.0], [11.5, 1440134.0], [11.6, 1440134.0], [11.7, 1440134.0], [11.8, 1440134.0], [11.9, 1440134.0], [12.0, 1440134.0], [12.1, 1440134.0], [12.2, 1810340.0], [12.3, 1810340.0], [12.4, 1810340.0], [12.5, 1810340.0], [12.6, 1810340.0], [12.7, 1810340.0], [12.8, 1810340.0], [12.9, 1810340.0], [13.0, 1810340.0], [13.1, 1810340.0], [13.2, 1810340.0], [13.3, 1810340.0], [13.4, 1810340.0], [13.5, 1810340.0], [13.6, 3.5902064E7], [13.7, 3.5902064E7], [13.8, 3.5902064E7], [13.9, 3.5902064E7], [14.0, 3.5902064E7], [14.1, 3.5902064E7], [14.2, 3.5902064E7], [14.3, 3.5902064E7], [14.4, 3.5902064E7], [14.5, 3.5902064E7], [14.6, 3.5902064E7], [14.7, 3.5902064E7], [14.8, 3.5902064E7], [14.9, 3.5902095E7], [15.0, 3.5902095E7], [15.1, 3.5902095E7], [15.2, 3.5902095E7], [15.3, 3.5902095E7], [15.4, 3.5902095E7], [15.5, 3.5902095E7], [15.6, 3.5902095E7], [15.7, 3.5902095E7], [15.8, 3.5902095E7], [15.9, 3.5902095E7], [16.0, 3.5902095E7], [16.1, 3.5902095E7], [16.2, 3.5902095E7], [16.3, 3.5902096E7], [16.4, 3.5902096E7], [16.5, 3.5902096E7], [16.6, 3.5902096E7], [16.7, 3.5902096E7], [16.8, 3.5902096E7], [16.9, 3.5902096E7], [17.0, 3.5902096E7], [17.1, 3.5902096E7], [17.2, 3.5902096E7], [17.3, 3.5902096E7], [17.4, 3.5902096E7], [17.5, 3.5902096E7], [17.6, 3.5902097E7], [17.7, 3.5902097E7], [17.8, 3.5902097E7], [17.9, 3.5902097E7], [18.0, 3.5902097E7], [18.1, 3.5902097E7], [18.2, 3.5902097E7], [18.3, 3.5902097E7], [18.4, 3.5902097E7], [18.5, 3.5902097E7], [18.6, 3.5902097E7], [18.7, 3.5902097E7], [18.8, 3.5902097E7], [18.9, 3.5902097E7], [19.0, 3.5902099E7], [19.1, 3.5902099E7], [19.2, 3.5902099E7], [19.3, 3.5902099E7], [19.4, 3.5902099E7], [19.5, 3.5902099E7], [19.6, 3.5902099E7], [19.7, 3.5902099E7], [19.8, 3.5902099E7], [19.9, 3.5902099E7], [20.0, 3.5902099E7], [20.1, 3.5902099E7], [20.2, 3.5902099E7], [20.3, 3.5902101E7], [20.4, 3.5902101E7], [20.5, 3.5902101E7], [20.6, 3.5902101E7], [20.7, 3.5902101E7], [20.8, 3.5902101E7], [20.9, 3.5902101E7], [21.0, 3.5902101E7], [21.1, 3.5902101E7], [21.2, 3.5902101E7], [21.3, 3.5902101E7], [21.4, 3.5902101E7], [21.5, 3.5902101E7], [21.6, 3.5902101E7], [21.7, 3.5902102E7], [21.8, 3.5902102E7], [21.9, 3.5902102E7], [22.0, 3.5902102E7], [22.1, 3.5902102E7], [22.2, 3.5902102E7], [22.3, 3.5902102E7], [22.4, 3.5902102E7], [22.5, 3.5902102E7], [22.6, 3.5902102E7], [22.7, 3.5902102E7], [22.8, 3.5902102E7], [22.9, 3.5902102E7], [23.0, 3.5902104E7], [23.1, 3.5902104E7], [23.2, 3.5902104E7], [23.3, 3.5902104E7], [23.4, 3.5902104E7], [23.5, 3.5902104E7], [23.6, 3.5902104E7], [23.7, 3.5902104E7], [23.8, 3.5902104E7], [23.9, 3.5902104E7], [24.0, 3.5902104E7], [24.1, 3.5902104E7], [24.2, 3.5902104E7], [24.3, 3.5902104E7], [24.4, 3.5902104E7], [24.5, 3.5902104E7], [24.6, 3.5902104E7], [24.7, 3.5902104E7], [24.8, 3.5902104E7], [24.9, 3.5902104E7], [25.0, 3.5902104E7], [25.1, 3.5902104E7], [25.2, 3.5902104E7], [25.3, 3.5902104E7], [25.4, 3.5902104E7], [25.5, 3.5902104E7], [25.6, 3.5902104E7], [25.7, 3.5902104E7], [25.8, 3.5902104E7], [25.9, 3.5902104E7], [26.0, 3.5902104E7], [26.1, 3.5902104E7], [26.2, 3.5902104E7], [26.3, 3.5902104E7], [26.4, 3.5902104E7], [26.5, 3.5902104E7], [26.6, 3.5902104E7], [26.7, 3.5902104E7], [26.8, 3.5902104E7], [26.9, 3.5902104E7], [27.0, 3.5902104E7], [27.1, 3.5902104E7], [27.2, 3.5902104E7], [27.3, 3.5902104E7], [27.4, 3.5902104E7], [27.5, 3.5902104E7], [27.6, 3.5902104E7], [27.7, 3.5902104E7], [27.8, 3.5902104E7], [27.9, 3.5902104E7], [28.0, 3.5902104E7], [28.1, 3.5902104E7], [28.2, 3.5902104E7], [28.3, 3.5902104E7], [28.4, 3.5902104E7], [28.5, 3.5902104E7], [28.6, 3.5902104E7], [28.7, 3.5902104E7], [28.8, 3.5902104E7], [28.9, 3.5902104E7], [29.0, 3.5902104E7], [29.1, 3.5902104E7], [29.2, 3.5902104E7], [29.3, 3.5902104E7], [29.4, 3.5902104E7], [29.5, 3.5902104E7], [29.6, 3.5902104E7], [29.7, 3.5902104E7], [29.8, 3.5902105E7], [29.9, 3.5902105E7], [30.0, 3.5902105E7], [30.1, 3.5902105E7], [30.2, 3.5902105E7], [30.3, 3.5902105E7], [30.4, 3.5902105E7], [30.5, 3.5902105E7], [30.6, 3.5902105E7], [30.7, 3.5902105E7], [30.8, 3.5902105E7], [30.9, 3.5902105E7], [31.0, 3.5902105E7], [31.1, 3.5902106E7], [31.2, 3.5902106E7], [31.3, 3.5902106E7], [31.4, 3.5902106E7], [31.5, 3.5902106E7], [31.6, 3.5902106E7], [31.7, 3.5902106E7], [31.8, 3.5902106E7], [31.9, 3.5902106E7], [32.0, 3.5902106E7], [32.1, 3.5902106E7], [32.2, 3.5902106E7], [32.3, 3.5902106E7], [32.4, 3.5902106E7], [32.5, 3.5902106E7], [32.6, 3.5902106E7], [32.7, 3.5902106E7], [32.8, 3.5902106E7], [32.9, 3.5902106E7], [33.0, 3.5902106E7], [33.1, 3.5902106E7], [33.2, 3.5902106E7], [33.3, 3.5902106E7], [33.4, 3.5902106E7], [33.5, 3.5902106E7], [33.6, 3.5902106E7], [33.7, 3.5902106E7], [33.8, 3.5902107E7], [33.9, 3.5902107E7], [34.0, 3.5902107E7], [34.1, 3.5902107E7], [34.2, 3.5902107E7], [34.3, 3.5902107E7], [34.4, 3.5902107E7], [34.5, 3.5902107E7], [34.6, 3.5902107E7], [34.7, 3.5902107E7], [34.8, 3.5902107E7], [34.9, 3.5902107E7], [35.0, 3.5902107E7], [35.1, 3.5902107E7], [35.2, 3.5902107E7], [35.3, 3.5902107E7], [35.4, 3.5902107E7], [35.5, 3.5902107E7], [35.6, 3.5902107E7], [35.7, 3.5902107E7], [35.8, 3.5902107E7], [35.9, 3.5902107E7], [36.0, 3.5902107E7], [36.1, 3.5902107E7], [36.2, 3.5902107E7], [36.3, 3.5902107E7], [36.4, 3.5902107E7], [36.5, 3.5902108E7], [36.6, 3.5902108E7], [36.7, 3.5902108E7], [36.8, 3.5902108E7], [36.9, 3.5902108E7], [37.0, 3.5902108E7], [37.1, 3.5902108E7], [37.2, 3.5902108E7], [37.3, 3.5902108E7], [37.4, 3.5902108E7], [37.5, 3.5902108E7], [37.6, 3.5902108E7], [37.7, 3.5902108E7], [37.8, 3.5902108E7], [37.9, 3.5902109E7], [38.0, 3.5902109E7], [38.1, 3.5902109E7], [38.2, 3.5902109E7], [38.3, 3.5902109E7], [38.4, 3.5902109E7], [38.5, 3.5902109E7], [38.6, 3.5902109E7], [38.7, 3.5902109E7], [38.8, 3.5902109E7], [38.9, 3.5902109E7], [39.0, 3.5902109E7], [39.1, 3.5902109E7], [39.2, 3.5902109E7], [39.3, 3.5902109E7], [39.4, 3.5902109E7], [39.5, 3.5902109E7], [39.6, 3.5902109E7], [39.7, 3.5902109E7], [39.8, 3.5902109E7], [39.9, 3.5902109E7], [40.0, 3.5902109E7], [40.1, 3.5902109E7], [40.2, 3.5902109E7], [40.3, 3.5902109E7], [40.4, 3.5902109E7], [40.5, 3.5902109E7], [40.6, 3.5902109E7], [40.7, 3.5902109E7], [40.8, 3.5902109E7], [40.9, 3.5902109E7], [41.0, 3.5902109E7], [41.1, 3.5902109E7], [41.2, 3.5902109E7], [41.3, 3.5902109E7], [41.4, 3.5902109E7], [41.5, 3.5902109E7], [41.6, 3.5902109E7], [41.7, 3.5902109E7], [41.8, 3.5902109E7], [41.9, 3.5902109E7], [42.0, 3.5902109E7], [42.1, 3.5902109E7], [42.2, 3.5902109E7], [42.3, 3.5902109E7], [42.4, 3.5902109E7], [42.5, 3.5902109E7], [42.6, 3.5902109E7], [42.7, 3.5902109E7], [42.8, 3.5902109E7], [42.9, 3.5902109E7], [43.0, 3.5902109E7], [43.1, 3.5902109E7], [43.2, 3.5902109E7], [43.3, 3.5902111E7], [43.4, 3.5902111E7], [43.5, 3.5902111E7], [43.6, 3.5902111E7], [43.7, 3.5902111E7], [43.8, 3.5902111E7], [43.9, 3.5902111E7], [44.0, 3.5902111E7], [44.1, 3.5902111E7], [44.2, 3.5902111E7], [44.3, 3.5902111E7], [44.4, 3.5902111E7], [44.5, 3.5902111E7], [44.6, 3.5902111E7], [44.7, 3.5902111E7], [44.8, 3.5902111E7], [44.9, 3.5902111E7], [45.0, 3.5902111E7], [45.1, 3.5902111E7], [45.2, 3.5902111E7], [45.3, 3.5902111E7], [45.4, 3.5902111E7], [45.5, 3.5902111E7], [45.6, 3.5902111E7], [45.7, 3.5902111E7], [45.8, 3.5902111E7], [45.9, 3.5902111E7], [46.0, 3.5902111E7], [46.1, 3.5902111E7], [46.2, 3.5902111E7], [46.3, 3.5902111E7], [46.4, 3.5902111E7], [46.5, 3.5902111E7], [46.6, 3.5902111E7], [46.7, 3.5902111E7], [46.8, 3.5902111E7], [46.9, 3.5902111E7], [47.0, 3.5902111E7], [47.1, 3.5902111E7], [47.2, 3.5902111E7], [47.3, 3.5902112E7], [47.4, 3.5902112E7], [47.5, 3.5902112E7], [47.6, 3.5902112E7], [47.7, 3.5902112E7], [47.8, 3.5902112E7], [47.9, 3.5902112E7], [48.0, 3.5902112E7], [48.1, 3.5902112E7], [48.2, 3.5902112E7], [48.3, 3.5902112E7], [48.4, 3.5902112E7], [48.5, 3.5902112E7], [48.6, 3.5902112E7], [48.7, 3.5902112E7], [48.8, 3.5902112E7], [48.9, 3.5902112E7], [49.0, 3.5902112E7], [49.1, 3.5902112E7], [49.2, 3.5902112E7], [49.3, 3.5902112E7], [49.4, 3.5902112E7], [49.5, 3.5902112E7], [49.6, 3.5902112E7], [49.7, 3.5902112E7], [49.8, 3.5902112E7], [49.9, 3.5902112E7], [50.0, 3.5902117E7], [50.1, 3.5902117E7], [50.2, 3.5902117E7], [50.3, 3.5902117E7], [50.4, 3.5902117E7], [50.5, 3.5902117E7], [50.6, 3.5902117E7], [50.7, 3.5902117E7], [50.8, 3.5902117E7], [50.9, 3.5902117E7], [51.0, 3.5902117E7], [51.1, 3.5902117E7], [51.2, 3.5902117E7], [51.3, 3.5902117E7], [51.4, 3.590212E7], [51.5, 3.590212E7], [51.6, 3.590212E7], [51.7, 3.590212E7], [51.8, 3.590212E7], [51.9, 3.590212E7], [52.0, 3.590212E7], [52.1, 3.590212E7], [52.2, 3.590212E7], [52.3, 3.590212E7], [52.4, 3.590212E7], [52.5, 3.590212E7], [52.6, 3.590212E7], [52.7, 3.590212E7], [52.8, 3.590212E7], [52.9, 3.590212E7], [53.0, 3.590212E7], [53.1, 3.590212E7], [53.2, 3.590212E7], [53.3, 3.590212E7], [53.4, 3.590212E7], [53.5, 3.590212E7], [53.6, 3.590212E7], [53.7, 3.590212E7], [53.8, 3.590212E7], [53.9, 3.590212E7], [54.0, 3.590212E7], [54.1, 3.5902121E7], [54.2, 3.5902121E7], [54.3, 3.5902121E7], [54.4, 3.5902121E7], [54.5, 3.5902121E7], [54.6, 3.5902121E7], [54.7, 3.5902121E7], [54.8, 3.5902121E7], [54.9, 3.5902121E7], [55.0, 3.5902121E7], [55.1, 3.5902121E7], [55.2, 3.5902121E7], [55.3, 3.5902121E7], [55.4, 3.5902121E7], [55.5, 3.5902123E7], [55.6, 3.5902123E7], [55.7, 3.5902123E7], [55.8, 3.5902123E7], [55.9, 3.5902123E7], [56.0, 3.5902123E7], [56.1, 3.5902123E7], [56.2, 3.5902123E7], [56.3, 3.5902123E7], [56.4, 3.5902123E7], [56.5, 3.5902123E7], [56.6, 3.5902123E7], [56.7, 3.5902123E7], [56.8, 3.5902124E7], [56.9, 3.5902124E7], [57.0, 3.5902124E7], [57.1, 3.5902124E7], [57.2, 3.5902124E7], [57.3, 3.5902124E7], [57.4, 3.5902124E7], [57.5, 3.5902124E7], [57.6, 3.5902124E7], [57.7, 3.5902124E7], [57.8, 3.5902124E7], [57.9, 3.5902124E7], [58.0, 3.5902124E7], [58.1, 3.5902124E7], [58.2, 3.5902125E7], [58.3, 3.5902125E7], [58.4, 3.5902125E7], [58.5, 3.5902125E7], [58.6, 3.5902125E7], [58.7, 3.5902125E7], [58.8, 3.5902125E7], [58.9, 3.5902125E7], [59.0, 3.5902125E7], [59.1, 3.5902125E7], [59.2, 3.5902125E7], [59.3, 3.5902125E7], [59.4, 3.5902125E7], [59.5, 3.5902125E7], [59.6, 3.5902125E7], [59.7, 3.5902125E7], [59.8, 3.5902125E7], [59.9, 3.5902125E7], [60.0, 3.5902125E7], [60.1, 3.5902125E7], [60.2, 3.5902125E7], [60.3, 3.5902125E7], [60.4, 3.5902125E7], [60.5, 3.5902125E7], [60.6, 3.5902125E7], [60.7, 3.5902125E7], [60.8, 3.5902125E7], [60.9, 3.5902128E7], [61.0, 3.5902128E7], [61.1, 3.5902128E7], [61.2, 3.5902128E7], [61.3, 3.5902128E7], [61.4, 3.5902128E7], [61.5, 3.5902128E7], [61.6, 3.5902128E7], [61.7, 3.5902128E7], [61.8, 3.5902128E7], [61.9, 3.5902128E7], [62.0, 3.5902128E7], [62.1, 3.5902128E7], [62.2, 3.590213E7], [62.3, 3.590213E7], [62.4, 3.590213E7], [62.5, 3.590213E7], [62.6, 3.590213E7], [62.7, 3.590213E7], [62.8, 3.590213E7], [62.9, 3.590213E7], [63.0, 3.590213E7], [63.1, 3.590213E7], [63.2, 3.590213E7], [63.3, 3.590213E7], [63.4, 3.590213E7], [63.5, 3.590213E7], [63.6, 3.590213E7], [63.7, 3.590213E7], [63.8, 3.590213E7], [63.9, 3.590213E7], [64.0, 3.590213E7], [64.1, 3.590213E7], [64.2, 3.590213E7], [64.3, 3.590213E7], [64.4, 3.590213E7], [64.5, 3.590213E7], [64.6, 3.590213E7], [64.7, 3.590213E7], [64.8, 3.590213E7], [64.9, 3.5902135E7], [65.0, 3.5902135E7], [65.1, 3.5902135E7], [65.2, 3.5902135E7], [65.3, 3.5902135E7], [65.4, 3.5902135E7], [65.5, 3.5902135E7], [65.6, 3.5902135E7], [65.7, 3.5902135E7], [65.8, 3.5902135E7], [65.9, 3.5902135E7], [66.0, 3.5902135E7], [66.1, 3.5902135E7], [66.2, 3.5902135E7], [66.3, 3.5902139E7], [66.4, 3.5902139E7], [66.5, 3.5902139E7], [66.6, 3.5902139E7], [66.7, 3.5902139E7], [66.8, 3.5902139E7], [66.9, 3.5902139E7], [67.0, 3.5902139E7], [67.1, 3.5902139E7], [67.2, 3.5902139E7], [67.3, 3.5902139E7], [67.4, 3.5902139E7], [67.5, 3.5902139E7], [67.6, 3.5902139E7], [67.7, 3.5902139E7], [67.8, 3.5902139E7], [67.9, 3.5902139E7], [68.0, 3.5902139E7], [68.1, 3.5902139E7], [68.2, 3.5902139E7], [68.3, 3.5902139E7], [68.4, 3.5902139E7], [68.5, 3.5902139E7], [68.6, 3.5902139E7], [68.7, 3.5902139E7], [68.8, 3.5902139E7], [68.9, 3.5902139E7], [69.0, 3.590214E7], [69.1, 3.590214E7], [69.2, 3.590214E7], [69.3, 3.590214E7], [69.4, 3.590214E7], [69.5, 3.590214E7], [69.6, 3.590214E7], [69.7, 3.590214E7], [69.8, 3.590214E7], [69.9, 3.590214E7], [70.0, 3.590214E7], [70.1, 3.590214E7], [70.2, 3.590214E7], [70.3, 3.5902146E7], [70.4, 3.5902146E7], [70.5, 3.5902146E7], [70.6, 3.5902146E7], [70.7, 3.5902146E7], [70.8, 3.5902146E7], [70.9, 3.5902146E7], [71.0, 3.5902146E7], [71.1, 3.5902146E7], [71.2, 3.5902146E7], [71.3, 3.5902146E7], [71.4, 3.5902146E7], [71.5, 3.5902146E7], [71.6, 3.5902146E7], [71.7, 3.5902152E7], [71.8, 3.5902152E7], [71.9, 3.5902152E7], [72.0, 3.5902152E7], [72.1, 3.5902152E7], [72.2, 3.5902152E7], [72.3, 3.5902152E7], [72.4, 3.5902152E7], [72.5, 3.5902152E7], [72.6, 3.5902152E7], [72.7, 3.5902152E7], [72.8, 3.5902152E7], [72.9, 3.5902152E7], [73.0, 3.5902157E7], [73.1, 3.5902157E7], [73.2, 3.5902157E7], [73.3, 3.5902157E7], [73.4, 3.5902157E7], [73.5, 3.5902157E7], [73.6, 3.5902157E7], [73.7, 3.5902157E7], [73.8, 3.5902157E7], [73.9, 3.5902157E7], [74.0, 3.5902157E7], [74.1, 3.5902157E7], [74.2, 3.5902157E7], [74.3, 3.5902157E7], [74.4, 3.5902165E7], [74.5, 3.5902165E7], [74.6, 3.5902165E7], [74.7, 3.5902165E7], [74.8, 3.5902165E7], [74.9, 3.5902165E7], [75.0, 3.5902165E7], [75.1, 3.5902165E7], [75.2, 3.5902165E7], [75.3, 3.5902165E7], [75.4, 3.5902165E7], [75.5, 3.5902165E7], [75.6, 3.5902165E7], [75.7, 3.5902165E7], [75.8, 3.5902165E7], [75.9, 3.5902165E7], [76.0, 3.5902165E7], [76.1, 3.5902165E7], [76.2, 3.5902165E7], [76.3, 3.5902165E7], [76.4, 3.5902165E7], [76.5, 3.5902165E7], [76.6, 3.5902165E7], [76.7, 3.5902165E7], [76.8, 3.5902165E7], [76.9, 3.5902165E7], [77.0, 3.5902165E7], [77.1, 3.5902165E7], [77.2, 3.5902165E7], [77.3, 3.5902165E7], [77.4, 3.5902165E7], [77.5, 3.5902165E7], [77.6, 3.5902165E7], [77.7, 3.5902165E7], [77.8, 3.5902165E7], [77.9, 3.5902165E7], [78.0, 3.5902165E7], [78.1, 3.5902165E7], [78.2, 3.5902165E7], [78.3, 3.5902165E7], [78.4, 3.5902167E7], [78.5, 3.5902167E7], [78.6, 3.5902167E7], [78.7, 3.5902167E7], [78.8, 3.5902167E7], [78.9, 3.5902167E7], [79.0, 3.5902167E7], [79.1, 3.5902167E7], [79.2, 3.5902167E7], [79.3, 3.5902167E7], [79.4, 3.5902167E7], [79.5, 3.5902167E7], [79.6, 3.5902167E7], [79.7, 3.5902167E7], [79.8, 3.5902167E7], [79.9, 3.5902167E7], [80.0, 3.5902167E7], [80.1, 3.5902167E7], [80.2, 3.5902167E7], [80.3, 3.5902167E7], [80.4, 3.5902167E7], [80.5, 3.5902167E7], [80.6, 3.5902167E7], [80.7, 3.5902167E7], [80.8, 3.5902167E7], [80.9, 3.5902167E7], [81.0, 3.5902167E7], [81.1, 3.5902204E7], [81.2, 3.5902204E7], [81.3, 3.5902204E7], [81.4, 3.5902204E7], [81.5, 3.5902204E7], [81.6, 3.5902204E7], [81.7, 3.5902204E7], [81.8, 3.5902204E7], [81.9, 3.5902204E7], [82.0, 3.5902204E7], [82.1, 3.5902204E7], [82.2, 3.5902204E7], [82.3, 3.5902204E7], [82.4, 3.5902204E7], [82.5, 3.5902207E7], [82.6, 3.5902207E7], [82.7, 3.5902207E7], [82.8, 3.5902207E7], [82.9, 3.5902207E7], [83.0, 3.5902207E7], [83.1, 3.5902207E7], [83.2, 3.5902207E7], [83.3, 3.5902207E7], [83.4, 3.5902207E7], [83.5, 3.5902207E7], [83.6, 3.5902207E7], [83.7, 3.5902207E7], [83.8, 3.5902208E7], [83.9, 3.5902208E7], [84.0, 3.5902208E7], [84.1, 3.5902208E7], [84.2, 3.5902208E7], [84.3, 3.5902208E7], [84.4, 3.5902208E7], [84.5, 3.5902208E7], [84.6, 3.5902208E7], [84.7, 3.5902208E7], [84.8, 3.5902208E7], [84.9, 3.5902208E7], [85.0, 3.5902208E7], [85.1, 3.5902208E7], [85.2, 3.5902208E7], [85.3, 3.5902208E7], [85.4, 3.5902208E7], [85.5, 3.5902208E7], [85.6, 3.5902208E7], [85.7, 3.5902208E7], [85.8, 3.5902208E7], [85.9, 3.5902208E7], [86.0, 3.5902208E7], [86.1, 3.5902208E7], [86.2, 3.5902208E7], [86.3, 3.5902208E7], [86.4, 3.5902208E7], [86.5, 3.5902223E7], [86.6, 3.5902223E7], [86.7, 3.5902223E7], [86.8, 3.5902223E7], [86.9, 3.5902223E7], [87.0, 3.5902223E7], [87.1, 3.5902223E7], [87.2, 3.5902223E7], [87.3, 3.5902223E7], [87.4, 3.5902223E7], [87.5, 3.5902223E7], [87.6, 3.5902223E7], [87.7, 3.5902223E7], [87.8, 3.5902223E7], [87.9, 3.5902227E7], [88.0, 3.5902227E7], [88.1, 3.5902227E7], [88.2, 3.5902227E7], [88.3, 3.5902227E7], [88.4, 3.5902227E7], [88.5, 3.5902227E7], [88.6, 3.5902227E7], [88.7, 3.5902227E7], [88.8, 3.5902227E7], [88.9, 3.5902227E7], [89.0, 3.5902227E7], [89.1, 3.5902227E7], [89.2, 3.5902232E7], [89.3, 3.5902232E7], [89.4, 3.5902232E7], [89.5, 3.5902232E7], [89.6, 3.5902232E7], [89.7, 3.5902232E7], [89.8, 3.5902232E7], [89.9, 3.5902232E7], [90.0, 3.5902232E7], [90.1, 3.5902232E7], [90.2, 3.5902232E7], [90.3, 3.5902232E7], [90.4, 3.5902232E7], [90.5, 3.5902232E7], [90.6, 3.5902249E7], [90.7, 3.5902249E7], [90.8, 3.5902249E7], [90.9, 3.5902249E7], [91.0, 3.5902249E7], [91.1, 3.5902249E7], [91.2, 3.5902249E7], [91.3, 3.5902249E7], [91.4, 3.5902249E7], [91.5, 3.5902249E7], [91.6, 3.5902249E7], [91.7, 3.5902249E7], [91.8, 3.5902249E7], [91.9, 3.5902288E7], [92.0, 3.5902288E7], [92.1, 3.5902288E7], [92.2, 3.5902288E7], [92.3, 3.5902288E7], [92.4, 3.5902288E7], [92.5, 3.5902288E7], [92.6, 3.5902288E7], [92.7, 3.5902288E7], [92.8, 3.5902288E7], [92.9, 3.5902288E7], [93.0, 3.5902288E7], [93.1, 3.5902288E7], [93.2, 3.5902288E7], [93.3, 3.5902291E7], [93.4, 3.5902291E7], [93.5, 3.5902291E7], [93.6, 3.5902291E7], [93.7, 3.5902291E7], [93.8, 3.5902291E7], [93.9, 3.5902291E7], [94.0, 3.5902291E7], [94.1, 3.5902291E7], [94.2, 3.5902291E7], [94.3, 3.5902291E7], [94.4, 3.5902291E7], [94.5, 3.5902291E7], [94.6, 3.5902294E7], [94.7, 3.5902294E7], [94.8, 3.5902294E7], [94.9, 3.5902294E7], [95.0, 3.5902294E7], [95.1, 3.5902294E7], [95.2, 3.5902294E7], [95.3, 3.5902294E7], [95.4, 3.5902294E7], [95.5, 3.5902294E7], [95.6, 3.5902294E7], [95.7, 3.5902294E7], [95.8, 3.5902294E7], [95.9, 3.5902294E7], [96.0, 3.5902298E7], [96.1, 3.5902298E7], [96.2, 3.5902298E7], [96.3, 3.5902298E7], [96.4, 3.5902298E7], [96.5, 3.5902298E7], [96.6, 3.5902298E7], [96.7, 3.5902298E7], [96.8, 3.5902298E7], [96.9, 3.5902298E7], [97.0, 3.5902298E7], [97.1, 3.5902298E7], [97.2, 3.5902298E7], [97.3, 3.5902303E7], [97.4, 3.5902303E7], [97.5, 3.5902303E7], [97.6, 3.5902303E7], [97.7, 3.5902303E7], [97.8, 3.5902303E7], [97.9, 3.5902303E7], [98.0, 3.5902303E7], [98.1, 3.5902303E7], [98.2, 3.5902303E7], [98.3, 3.5902303E7], [98.4, 3.5902303E7], [98.5, 3.5902303E7], [98.6, 3.5902303E7], [98.7, 3.5902305E7], [98.8, 3.5902305E7], [98.9, 3.5902305E7], [99.0, 3.5902305E7], [99.1, 3.5902305E7], [99.2, 3.5902305E7], [99.3, 3.5902305E7], [99.4, 3.5902305E7], [99.5, 3.5902305E7], [99.6, 3.5902305E7], [99.7, 3.5902305E7], [99.8, 3.5902305E7], [99.9, 3.5902305E7], [100.0, 3.5902305E7]], "isOverall": false, "label": "Search", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 131.0, "series": [{"data": [[0.0, 15.0], [3.59015E7, 51.0], [3.58933E7, 29.0], [3.59016E7, 25.0], [3.58934E7, 25.0], [3.58935E7, 28.0], [3.59017E7, 27.0], [3.59018E7, 26.0], [3.58936E7, 19.0], [3.58937E7, 30.0], [3.59019E7, 19.0], [3.58938E7, 27.0], [3.5902E7, 36.0], [3.58939E7, 38.0], [3.59021E7, 48.0], [3.59022E7, 17.0], [3.5894E7, 23.0], [3.59023E7, 3.0], [3.58941E7, 29.0], [3.58942E7, 34.0], [3.59024E7, 3.0], [3.58943E7, 38.0], [3.58944E7, 46.0], [3.58945E7, 42.0], [3.58946E7, 38.0], [3.58947E7, 26.0], [3.58948E7, 40.0], [3.58949E7, 43.0], [3.5895E7, 42.0], [3.58951E7, 41.0], [3.58952E7, 43.0], [3.58953E7, 42.0], [3.58954E7, 36.0], [3.58955E7, 30.0], [3.58956E7, 42.0], [3.58957E7, 45.0], [3.58958E7, 46.0], [3.58959E7, 44.0], [3.5896E7, 46.0], [3.58961E7, 39.0], [100.0, 7.0], [3.58962E7, 33.0], [3.58963E7, 35.0], [3.58964E7, 38.0], [3.58965E7, 32.0], [200.0, 30.0], [3.58966E7, 43.0], [3.58967E7, 39.0], [3.58968E7, 35.0], [300.0, 14.0], [3.58969E7, 41.0], [3.5897E7, 40.0], [400.0, 8.0], [3.58971E7, 45.0], [3.58972E7, 38.0], [3.58973E7, 62.0], [3.58974E7, 44.0], [3.58975E7, 46.0], [3.58976E7, 46.0], [3.58977E7, 49.0], [3.58978E7, 33.0], [3.58979E7, 45.0], [3.5898E7, 26.0], [3.58981E7, 27.0], [3.58982E7, 38.0], [3.58983E7, 33.0], [3.58984E7, 32.0], [3.58985E7, 36.0], [3.58986E7, 47.0], [3.58987E7, 43.0], [3.58988E7, 54.0], [3.58989E7, 54.0], [3.5899E7, 52.0], [3.58991E7, 50.0], [3.58992E7, 50.0], [3.58993E7, 61.0], [3.58994E7, 51.0], [3.58995E7, 46.0], [3.58996E7, 49.0], [3.58997E7, 48.0], [3.58998E7, 58.0], [3.58999E7, 42.0], [3.59E7, 46.0], [3.59001E7, 88.0], [3.59002E7, 74.0], [3.5892E7, 3.0], [1810400.0, 1.0], [3.59003E7, 68.0], [3.58921E7, 2.0], [3.59004E7, 131.0], [3.58922E7, 5.0], [3.59005E7, 59.0], [3.58923E7, 3.0], [3.59006E7, 104.0], [3.58924E7, 5.0], [3.59007E7, 65.0], [3.58925E7, 8.0], [3.58926E7, 9.0], [3.59008E7, 28.0], [3.59009E7, 23.0], [3.58927E7, 6.0], [3.58928E7, 16.0], [3.5901E7, 27.0], [3.58929E7, 20.0], [3.59011E7, 30.0], [3.5893E7, 18.0], [3.59012E7, 35.0], [3.59013E7, 30.0], [3.58931E7, 20.0], [3.58932E7, 25.0], [3.59014E7, 30.0]], "isOverall": false, "label": "Bind", "isController": false}, {"data": [[3.5902E7, 5.0], [1440100.0, 1.0], [1257600.0, 2.0], [1258000.0, 1.0], [1258400.0, 1.0], [3.59021E7, 45.0], [3.59022E7, 12.0], [1810300.0, 1.0], [3.59023E7, 2.0], [1257900.0, 2.0], [1258300.0, 2.0]], "isOverall": false, "label": "Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3.59024E7, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3990.0, "series": [{"data": [[0.0, 74.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 10.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3990.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 74.20270270270272, "minX": 1.68661429E12, "maxY": 999.8490000000004, "series": [{"data": [[1.6866502E12, 656.3389999999999]], "isOverall": false, "label": "192.168.122.59-Thread Group", "isController": false}, {"data": [[1.6866161E12, 990.5], [1.6866502E12, 588.3063700707786], [1.68661555E12, 996.6250000000001], [1.68661429E12, 74.20270270270272], [1.68661573E12, 992.0]], "isOverall": false, "label": "192.168.122.22-Thread Group", "isController": false}, {"data": [[1.6866502E12, 611.4739999999997]], "isOverall": false, "label": "192.168.122.208-Thread Group", "isController": false}, {"data": [[1.6866502E12, 999.8490000000004]], "isOverall": false, "label": "192.168.122.223-Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.6866502E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 22.0, "minX": 40.0, "maxY": 3.5902349E7, "series": [{"data": [[40.0, 3.5897203E7], [41.0, 3.5894409E7], [43.0, 3.58954205E7], [47.0, 3.5894525E7], [46.0, 3.5895136E7], [49.0, 3.5894507E7], [55.0, 299.44999999999993], [61.0, 3.5894735E7], [64.0, 3.58942655E7], [71.0, 3.589439891304348E7], [70.0, 3.5895257E7], [79.0, 233.03448275862075], [80.0, 250.5], [81.0, 184.33333333333334], [82.0, 258.5], [83.0, 322.0], [84.0, 22.0], [85.0, 172.5], [86.0, 170.0], [87.0, 305.0], [90.0, 73.0], [88.0, 3.5893268E7], [92.0, 60.5], [99.0, 3.5894975E7], [103.0, 3.58964715E7], [102.0, 3.5900683E7], [101.0, 3.5894315666666664E7], [100.0, 3.5896398E7], [106.0, 3.58975965E7], [105.0, 3.589640742857143E7], [104.0, 3.5898437166666664E7], [111.0, 3.5900215E7], [110.0, 3.58958775E7], [109.0, 3.58966082E7], [108.0, 3.5893252E7], [115.0, 3.589646E7], [114.0, 3.589613675E7], [119.0, 3.589527329545455E7], [118.0, 3.5894432E7], [116.0, 3.5895095E7], [123.0, 3.5893906E7], [120.0, 3.58955905E7], [122.0, 3.5896599E7], [127.0, 3.5897623E7], [134.0, 3.5899053E7], [129.0, 3.5898696E7], [132.0, 3.5894675E7], [131.0, 3.58946575E7], [142.0, 3.5895883E7], [141.0, 3.5896199222222224E7], [136.0, 3.5894517E7], [138.0, 3.58934515E7], [137.0, 3.5893339E7], [151.0, 3.5895933E7], [149.0, 3.5894833333333336E7], [148.0, 3.58946418E7], [147.0, 3.5895337333333336E7], [146.0, 3.5894752E7], [144.0, 3.5896083E7], [156.0, 3.589555745454545E7], [152.0, 3.589415E7], [165.0, 3.589907971428572E7], [175.0, 3.5897558E7], [173.0, 3.5897594166666664E7], [172.0, 3.5898347E7], [170.0, 3.5896824E7], [169.0, 3.589848555555555E7], [179.0, 3.58987925E7], [178.0, 3.5898623E7], [177.0, 3.5898679E7], [176.0, 3.58977081E7], [183.0, 3.58987747E7], [182.0, 3.5893237E7], [187.0, 3.58960525E7], [186.0, 3.5899015833333336E7], [191.0, 3.5898637E7], [184.0, 3.5898835E7], [196.0, 3.5899209666666664E7], [192.0, 3.5899977E7], [197.0, 3.5897518E7], [195.0, 3.58984925E7], [194.0, 3.5898795666666664E7], [205.0, 3.5900405E7], [200.0, 3.5895210666666664E7], [214.0, 3.58983615E7], [213.0, 3.5894447E7], [212.0, 3.58996549375E7], [215.0, 3.589878E7], [210.0, 3.5899252166666664E7], [209.0, 3.58997136E7], [220.0, 3.5897355666666664E7], [218.0, 3.5899379E7], [216.0, 3.5899084E7], [219.0, 3.58987975E7], [217.0, 3.58992925E7], [221.0, 3.5896146E7], [229.0, 3.58969895E7], [226.0, 3.589782975E7], [225.0, 3.5895082E7], [239.0, 3.589762E7], [238.0, 3.589820775E7], [232.0, 3.5899959E7], [244.0, 3.5895691E7], [243.0, 3.5895629E7], [242.0, 3.5898695E7], [241.0, 3.58992075E7], [240.0, 3.58990585E7], [247.0, 3.58952276E7], [246.0, 3.5895215400000006E7], [251.0, 3.58946116E7], [250.0, 3.5895979E7], [270.0, 3.5894855666666664E7], [282.0, 3.5895462E7], [280.0, 3.5894483E7], [276.0, 3.58940605E7], [275.0, 3.5894269E7], [274.0, 3.58942814E7], [273.0, 3.5894594E7], [272.0, 3.589456911111111E7], [278.0, 3.5896851E7], [291.0, 3.5893326E7], [303.0, 3.58998205E7], [302.0, 3.5893799E7], [296.0, 3.5895829333333336E7], [299.0, 3.5897625E7], [298.0, 3.5897702E7], [293.0, 3.5894264E7], [292.0, 3.58971785E7], [290.0, 3.5896187E7], [288.0, 3.5893673E7], [301.0, 3.5897515E7], [305.0, 3.58961145E7], [304.0, 3.5899805333333336E7], [309.0, 3.5897096E7], [310.0, 3.58992235E7], [311.0, 3.5897613E7], [312.0, 3.58968368E7], [313.0, 3.589756071875001E7], [335.0, 3.590041E7], [334.0, 3.58945505E7], [333.0, 3.589819433333333E7], [324.0, 3.5896382E7], [322.0, 3.5896799E7], [321.0, 3.589599975E7], [320.0, 3.58944375E7], [329.0, 3.5897523E7], [349.0, 3.589592725E7], [346.0, 3.5894938E7], [340.0, 3.5896931666666664E7], [337.0, 3.58946605E7], [355.0, 3.5895744E7], [367.0, 3.58967875E7], [366.0, 3.58982815E7], [363.0, 3.589760128571429E7], [361.0, 3.58962306E7], [358.0, 3.5894738E7], [357.0, 3.589546E7], [354.0, 3.58965625E7], [352.0, 3.5893844E7], [382.0, 3.5893785E7], [380.0, 3.5893636E7], [377.0, 3.5896192473684214E7], [376.0, 3.5893867333333336E7], [373.0, 3.589433E7], [369.0, 3.58958676E7], [381.0, 3.5895661E7], [397.0, 3.589741205263158E7], [395.0, 3.58984055E7], [392.0, 3.5896941E7], [388.0, 3.5898179E7], [386.0, 3.5892723E7], [398.0, 3.5896689870967746E7], [394.0, 3.5897756E7], [412.0, 3.5896975E7], [414.0, 3.5897164E7], [408.0, 3.5897195E7], [403.0, 3.5897204E7], [429.0, 3.5897021E7], [428.0, 3.589581381818181E7], [427.0, 3.5896594E7], [426.0, 3.5893913E7], [419.0, 3.5900414E7], [418.0, 3.5897187E7], [416.0, 3.5897267E7], [431.0, 3.58968615E7], [425.0, 3.589700463636363E7], [424.0, 3.5897142E7], [433.0, 3.5895842309523806E7], [446.0, 3.5894137E7], [442.0, 3.5894849333333336E7], [441.0, 3.5895184E7], [440.0, 3.589546444444445E7], [438.0, 3.589615700000001E7], [436.0, 3.589614547619048E7], [437.0, 3.5895961333333336E7], [443.0, 3.589507816666667E7], [432.0, 3.5896992E7], [445.0, 3.5895741E7], [434.0, 3.5896381E7], [463.0, 3.589854E7], [459.0, 3.589544711764706E7], [452.0, 3.5897137E7], [457.0, 3.5893979E7], [454.0, 3.589550942105263E7], [460.0, 3.58948605E7], [458.0, 3.589537E7], [461.0, 3.5894388E7], [473.0, 3.589873E7], [478.0, 3.58978098E7], [475.0, 3.589632275E7], [471.0, 3.5898918756097555E7], [468.0, 3.58974095E7], [464.0, 3.5895884E7], [472.0, 3.5896201E7], [470.0, 3.5896320375E7], [469.0, 3.5897000333333336E7], [492.0, 3.58984795E7], [488.0, 3.58980358E7], [486.0, 3.5898144909090914E7], [485.0, 3.5898861E7], [484.0, 3.589781063636365E7], [483.0, 3.5897765E7], [487.0, 3.5898134E7], [482.0, 3.5899655E7], [495.0, 3.5897643333333336E7], [494.0, 3.5894265E7], [489.0, 3.5898432E7], [504.0, 3.58972998E7], [509.0, 3.5895076E7], [507.0, 3.5894259333333336E7], [506.0, 3.5897771E7], [505.0, 3.5899879E7], [503.0, 3.58970495E7], [500.0, 3.58966586875E7], [499.0, 3.58961674E7], [497.0, 3.5898433E7], [496.0, 3.5896508E7], [502.0, 3.5897129E7], [501.0, 3.5897011083333336E7], [539.0, 3.590181715384615E7], [529.0, 3.589768513333333E7], [542.0, 3.5898954E7], [543.0, 3.58979925E7], [528.0, 3.589888475E7], [540.0, 3.589820075E7], [541.0, 3.5897461E7], [538.0, 3.589728821428572E7], [537.0, 3.5902115E7], [536.0, 3.5897489E7], [518.0, 3.5897119E7], [516.0, 3.589701616666667E7], [514.0, 3.5899383E7], [527.0, 3.5897834E7], [512.0, 3.589834E7], [513.0, 3.5897669483870976E7], [525.0, 3.58963115E7], [521.0, 3.58997E7], [524.0, 3.5897885E7], [535.0, 3.5895827E7], [531.0, 3.589828699999999E7], [530.0, 3.589727521428571E7], [559.0, 3.5896256E7], [570.0, 3.58981192E7], [568.0, 3.5895112E7], [565.0, 3.5894278666666664E7], [564.0, 3.5894751E7], [562.0, 3.5894856E7], [560.0, 3.5896364E7], [567.0, 3.58948485E7], [566.0, 3.5894117E7], [573.0, 3.589661991666668E7], [572.0, 3.58953334E7], [574.0, 3.5896209416666664E7], [575.0, 3.589522145454545E7], [558.0, 3.58970794E7], [557.0, 3.5897208166666664E7], [556.0, 3.5895708E7], [555.0, 3.5894432E7], [553.0, 3.589706E7], [552.0, 3.5899625E7], [554.0, 3.5897284E7], [551.0, 3.58977694E7], [549.0, 3.5896745E7], [548.0, 3.5899557E7], [546.0, 3.5898435125E7], [544.0, 3.59006695E7], [547.0, 3.589773821428571E7], [580.0, 3.589903625E7], [602.0, 3.589469733333333E7], [603.0, 3.5898047E7], [604.0, 3.5894083E7], [600.0, 3.5894444E7], [593.0, 3.5894370166666664E7], [588.0, 3.5896226666666664E7], [577.0, 3.589447153333333E7], [578.0, 3.589361E7], [576.0, 3.589431225E7], [586.0, 3.58946482E7], [585.0, 3.5895849E7], [584.0, 3.5901221E7], [583.0, 3.5894955666666664E7], [582.0, 3.58941416E7], [639.0, 3.58988875E7], [633.0, 3.5898923666666664E7], [614.0, 3.5899041E7], [629.0, 3.5896533E7], [628.0, 3.589625100000001E7], [627.0, 3.5897387E7], [625.0, 3.58988255E7], [623.0, 3.5896818E7], [622.0, 3.5898969E7], [621.0, 3.58968914E7], [619.0, 3.5897724333333336E7], [618.0, 3.5897987666666664E7], [617.0, 3.589775028571429E7], [616.0, 3.5897162E7], [646.0, 3.5900550666666664E7], [670.0, 3.5893005E7], [668.0, 3.590067871428572E7], [664.0, 3.5901808E7], [667.0, 3.5898666E7], [658.0, 3.590017816666667E7], [661.0, 3.59010235E7], [660.0, 3.5900387333333336E7], [671.0, 3.5900516E7], [657.0, 3.5902181E7], [651.0, 3.589707E7], [649.0, 3.5898864E7], [648.0, 3.5898825E7], [645.0, 3.589929225E7], [643.0, 3.5900608E7], [640.0, 3.5893597E7], [655.0, 3.5902349E7], [654.0, 3.590191E7], [652.0, 3.5900349E7], [687.0, 3.5898597E7], [693.0, 3.5894895E7], [686.0, 3.589687075E7], [680.0, 3.5900222E7], [685.0, 3.5902308E7], [683.0, 3.5893788E7], [681.0, 3.5893881E7], [679.0, 3.5900229E7], [676.0, 3.590032E7], [732.0, 3.5900351E7], [731.0, 3.5901023666666664E7], [729.0, 3.5899041666666664E7], [725.0, 3.5900079E7], [723.0, 3.58957405E7], [712.0, 3.5897944E7], [752.0, 3.5893886E7], [757.0, 3.58967375E7], [755.0, 3.5893294E7], [758.0, 3.5895833E7], [754.0, 3.58943005E7], [753.0, 3.58972612E7], [751.0, 3.5893909E7], [737.0, 3.58980568E7], [736.0, 3.5895565E7], [750.0, 3.5895866E7], [749.0, 3.5893428655172415E7], [746.0, 3.589470525E7], [747.0, 3.589341E7], [741.0, 3.5897290666666664E7], [765.0, 3.5894398E7], [762.0, 3.5893152E7], [767.0, 3.5892848E7], [761.0, 3.5895844666666664E7], [738.0, 3.5897363E7], [773.0, 3.589791E7], [797.0, 3.5894149666666664E7], [795.0, 3.5896192E7], [775.0, 3.5893218E7], [790.0, 3.5896992E7], [789.0, 3.5892833E7], [787.0, 3.5895452333333336E7], [791.0, 3.58986635E7], [786.0, 3.589307405555555E7], [785.0, 3.58963845E7], [781.0, 3.58934285E7], [780.0, 3.58945415E7], [779.0, 3.5893254E7], [778.0, 3.5893007E7], [772.0, 3.5893804E7], [771.0, 3.5896346E7], [768.0, 3.5896557E7], [770.0, 3.589314E7], [814.0, 3.58968775E7], [810.0, 3.589648890909091E7], [829.0, 3.5902178E7], [828.0, 3.5899812E7], [830.0, 3.5899268E7], [813.0, 3.589591985714286E7], [809.0, 3.5892497E7], [808.0, 3.5896319666666664E7], [805.0, 3.5895888E7], [804.0, 3.5894798E7], [803.0, 3.5894018E7], [801.0, 3.5893524E7], [862.0, 3.5899949E7], [856.0, 3.5895909E7], [853.0, 3.5896671E7], [850.0, 3.589641775E7], [839.0, 3.5896425E7], [833.0, 3.5894249E7], [846.0, 3.5900035E7], [832.0, 3.5898084E7], [845.0, 3.5900197E7], [844.0, 3.5899787666666664E7], [843.0, 3.589988E7], [842.0, 3.58987428E7], [840.0, 3.59009775E7], [836.0, 3.5900991349999994E7], [835.0, 3.589755E7], [838.0, 3.5897562E7], [837.0, 3.5900814E7], [861.0, 3.589697485714286E7], [857.0, 3.5894515E7], [849.0, 3.590078625000001E7], [848.0, 3.5899714E7], [893.0, 3.5900679888888896E7], [891.0, 3.58945285E7], [888.0, 3.58989295E7], [871.0, 3.5894448E7], [868.0, 3.589446E7], [867.0, 3.5894471E7], [887.0, 3.589844275E7], [886.0, 3.59004465E7], [885.0, 3.589899245833333E7], [882.0, 3.5898713333333336E7], [866.0, 3.590165E7], [880.0, 3.5898490333333336E7], [894.0, 3.5899149E7], [878.0, 3.589940066666667E7], [877.0, 3.5900519E7], [876.0, 3.5898704E7], [873.0, 3.5894436E7], [924.0, 3.5900967666666664E7], [926.0, 3.5893268E7], [925.0, 3.5901805E7], [923.0, 3.5894781E7], [922.0, 3.59012455E7], [903.0, 3.5900651666666664E7], [918.0, 3.589916575E7], [915.0, 3.5901592E7], [916.0, 3.5900365E7], [912.0, 3.5895055E7], [910.0, 3.5900129E7], [911.0, 3.590039325E7], [905.0, 3.5899392E7], [907.0, 3.5899283666666664E7], [909.0, 3.58996765E7], [908.0, 3.5900421E7], [902.0, 3.59011628E7], [901.0, 3.5900928E7], [898.0, 3.5900256333333336E7], [897.0, 3.59015914E7], [957.0, 3.58931195E7], [958.0, 3.58954075E7], [955.0, 3.5901582E7], [956.0, 3.5900854666666664E7], [954.0, 3.5897449E7], [952.0, 3.58965475E7], [953.0, 3.590042975000001E7], [935.0, 3.5900167E7], [933.0, 3.5900715E7], [942.0, 3.589883925E7], [941.0, 3.5900256E7], [943.0, 3.59002335E7], [932.0, 3.5900332E7], [940.0, 3.58951555E7], [938.0, 3.5896392333333336E7], [949.0, 3.58972195E7], [951.0, 3.59004545E7], [948.0, 3.589709987499999E7], [947.0, 3.5896387E7], [945.0, 3.5898831E7], [989.0, 3.589774836363637E7], [990.0, 2.4536737666666668E7], [971.0, 3.5900861333333336E7], [970.0, 3.59017828E7], [969.0, 3.5895461E7], [991.0, 3.5896771E7], [988.0, 3.589951944444445E7], [984.0, 3.5899968E7], [986.0, 3.5900626E7], [987.0, 3.5900626E7], [966.0, 3.590080125E7], [962.0, 3.5899776E7], [964.0, 3.5902041E7], [963.0, 3.5899039E7], [965.0, 3.589962225E7], [961.0, 3.5902242E7], [960.0, 3.5900661E7], [982.0, 3.5898835E7], [983.0, 3.5900460198863626E7], [976.0, 3.590081E7], [977.0, 3.5899937E7], [980.0, 3.58983035E7], [981.0, 3.5899947E7], [978.0, 3.590038837499999E7], [975.0, 3.59012815E7], [972.0, 3.59017665E7], [974.0, 3.5899981E7], [1000.0, 3.5898607823993675E7], [995.0, 3.589946662E7], [997.0, 3.59004674E7], [999.0, 3.59007435E7], [998.0, 3.5901089E7], [996.0, 3.589740084210526E7], [994.0, 3.589889E7], [993.0, 3.589928928571428E7]], "isOverall": false, "label": "Bind", "isController": false}, {"data": [[700.1330000000008, 3.522524815874993E7]], "isOverall": false, "label": "Bind-Aggregated", "isController": false}, {"data": [[627.0, 3.5902232E7], [612.0, 3.5902227E7], [661.0, 3.59022595E7], [660.0, 3.5902303E7], [658.0, 3.59023015E7], [657.0, 3.59021055E7], [656.0, 3.5902109E7], [655.0, 3.5902124E7], [652.0, 3.5902109E7], [686.0, 3.5902249E7], [680.0, 3.5902167E7], [711.0, 3.5902208E7], [836.0, 3.59021398E7], [849.0, 3.590215E7], [848.0, 3.590213E7], [876.0, 3.5902207E7], [875.0, 3.5902208E7], [925.0, 3.5902105E7], [910.0, 3.590213E7], [903.0, 3.590212E7], [956.0, 3.5902136E7], [991.0, 1810340.0], [983.0, 3.590210975E7], [982.0, 3.5902138E7], [978.0, 3.5902155E7], [1000.0, 1257680.5], [998.0, 1257935.0], [997.0, 1257953.0], [996.0, 1258001.0], [995.0, 1258343.0], [994.0, 1258379.0], [993.0, 1258428.0], [992.0, 1440134.0]], "isOverall": false, "label": "Search", "isController": false}, {"data": [[883.7972972972974, 3.1230438067567565E7]], "isOverall": false, "label": "Search-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.68661429E12, "maxY": 132479.4, "series": [{"data": [[1.6866161E12, 57.4], [1.6866502E12, 132479.4], [1.68661555E12, 289.9], [1.68661429E12, 1583.6], [1.68661573E12, 48.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6866161E12, 0.0], [1.6866502E12, 0.0], [1.68661555E12, 0.0], [1.68661429E12, 0.0], [1.68661573E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.6866502E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 241.48648648648643, "minX": 1.68661429E12, "maxY": 3.590214910937499E7, "series": [{"data": [[1.6866161E12, 1810442.0], [1.6866502E12, 3.5897876260636985E7], [1.68661429E12, 241.48648648648643]], "isOverall": false, "label": "Bind", "isController": false}, {"data": [[1.6866161E12, 1810340.0], [1.6866502E12, 3.590214910937499E7], [1.68661555E12, 1258050.0], [1.68661573E12, 1440134.0]], "isOverall": false, "label": "Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.6866502E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68661429E12, "maxY": 4.9E-324, "series": [{"data": [[1.6866161E12, 0.0], [1.6866502E12, 0.0], [1.68661429E12, 0.0]], "isOverall": false, "label": "Bind", "isController": false}, {"data": [[1.6866161E12, 0.0], [1.6866502E12, 0.0], [1.68661555E12, 0.0], [1.68661573E12, 0.0]], "isOverall": false, "label": "Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.6866502E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68661429E12, "maxY": 4.9E-324, "series": [{"data": [[1.6866161E12, 0.0], [1.6866502E12, 0.0], [1.68661429E12, 0.0]], "isOverall": false, "label": "Bind", "isController": false}, {"data": [[1.6866161E12, 0.0], [1.6866502E12, 0.0], [1.68661555E12, 0.0], [1.68661573E12, 0.0]], "isOverall": false, "label": "Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.6866502E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 22.0, "minX": 1.68661429E12, "maxY": 1810442.0, "series": [{"data": [[1.6866161E12, 1810442.0], [1.68661555E12, 1258428.0], [1.68661429E12, 492.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6866161E12, 1810442.0], [1.68661555E12, 1258428.0], [1.68661429E12, 409.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6866161E12, 1810442.0], [1.68661555E12, 1258428.0], [1.68661429E12, 492.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6866161E12, 1810442.0], [1.68661555E12, 1258428.0], [1.68661429E12, 489.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6866161E12, 1810340.0], [1.68661555E12, 1257678.0], [1.68661429E12, 22.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6866161E12, 1810391.0], [1.68661555E12, 1257977.0], [1.68661429E12, 266.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.6866161E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 266.0, "minX": 1.0, "maxY": 3.5900251E7, "series": [{"data": [[2.0, 1810391.0], [74.0, 266.0], [5.0, 1257935.0], [3.0, 1258379.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 1440134.0], [1287.0, 3.5900251E7], [1702.0, 3.58966805E7], [1000.0, 3.58988285E7]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1702.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 4.9E-324, "series": [{"data": [[2.0, 0.0], [74.0, 0.0], [5.0, 0.0], [3.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0], [1287.0, 0.0], [1702.0, 0.0], [1000.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1702.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 58.4, "minX": 1.68661429E12, "maxY": 349.0, "series": [{"data": [[1.68661429E12, 58.4], [1.6866143E12, 349.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.6866143E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.68661429E12, "maxY": 398.9, "series": [{"data": [[1.6866161E12, 0.2], [1.68661555E12, 0.8], [1.68661429E12, 7.4]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.6866502E12, 398.9], [1.68661573E12, 0.1]], "isOverall": false, "label": "800", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.6866502E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.68661429E12, "maxY": 392.5, "series": [{"data": [[1.6866161E12, 0.1], [1.68661555E12, 0.8]], "isOverall": false, "label": "Search-success", "isController": false}, {"data": [[1.6866502E12, 6.4], [1.68661573E12, 0.1]], "isOverall": false, "label": "Search-failure", "isController": false}, {"data": [[1.6866161E12, 0.1], [1.68661429E12, 7.4]], "isOverall": false, "label": "Bind-success", "isController": false}, {"data": [[1.6866502E12, 392.5]], "isOverall": false, "label": "Bind-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.6866502E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.68661429E12, "maxY": 398.9, "series": [{"data": [[1.6866161E12, 0.2], [1.68661555E12, 0.8], [1.68661429E12, 7.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6866502E12, 398.9], [1.68661573E12, 0.1]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.6866502E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

